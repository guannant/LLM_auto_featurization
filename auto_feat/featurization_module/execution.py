from typing import Dict
import pandas as pd
import numpy as np

def extract_code(result: str) -> str:
    """Extract Python code from ```python ... ``` block."""
    return result.strip().strip("```").replace("python", "", 1).strip()

def feature_generation(llm, max_retries: int):
    """
    Generate and execute Python code that creates new features as columns on the
    existing DataFrame. Behavior:
      - If the generated code *runs* but forgets to create some required features,
        we append an error note to the next prompt and RETRY (self-correct).
      - If the generated code raises a KeyError due to referencing a non-existent
        original column, we DO NOT retry — we instead create any missing required
        feature columns and fill them with NaN, then succeed.
    """
    def agent_node(state: object) -> bool:
        """
        state must provide:
          - state.construct_strategy: dict {feature_name: description}  (instructions)
          - state.feature_dict:       dict {feature_name: description}  (for logging)
          - state.clean_augmented_data: pandas.DataFrame (original dataset)

        state will be updated with:
          - state.generated_code: str (Python code generated by LLM)
          - state.clean_augmented_data: pandas.DataFrame (overwritten with transformed dataset)
          - state.error_message: str (used only when retrying due to missing features)
        """

        # Build feature specs string for the prompt
        feature_specs = "\n".join(
            [f"- {fname}: {desc}" for fname, desc in state.construct_strategy.items()]
        )

        # ---------------- SYSTEM PROMPT ----------------
        base_system_message = (
            "System: You are a Python data engineer. "
            "You will receive feature construction instructions that must only use the "
            "original columns in a pandas DataFrame named `df`.\n\n"
            "CODING RULES:\n"
            "1. Only use the existing columns in `df` as inputs for creating new features.\n"
            "2. Modify `df` in-place by attaching each new feature as a new column (e.g., df['new'] = ...).\n"
            "3. Do not create a copy of `df` or a new variable. Always work on the same `df`.\n"
            "4. Do not include return statements.\n\n"
            "STRICT FORMATTING:\n"
            "- Use only Python built-ins, numpy, and pandas.\n"
            "- Always include at the top:\n"
            "    import pandas as pd\n"
            "    import numpy as np\n"
            "    import warnings\n"
            "    warnings.filterwarnings('ignore')\n"
            "- Do NOT add comments or explanations — only executable code.\n"
            "- Output must be wrapped inside a ```python code block."
        )

        # ---------------- USER PROMPT ----------------
        base_user_msg = (
            "Here are the feature specifications:\n"
            f"{feature_specs}\n\n"
            "The input dataset columns are:\n"
            f"{list(state.clean_augmented_data.columns)}\n\n"
            "Generate the Python code now."
        )

        # Retry loop
        last_result = None
        system_message = base_system_message
        user_msg = base_user_msg

        for attempt in range(max_retries):
            prompt = [
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_msg}
            ]

            raw = llm(prompt)
            result = raw if isinstance(raw, str) else raw["choices"][0]["message"]["content"]
            last_result = result

            # Expect code block
            if not (isinstance(result, str) and result.strip().startswith("```python") and result.strip().endswith("```")):
                # If not in the strict format, ask again next loop
                user_msg = (
                    base_user_msg
                    + "\n\nNote: Your last output did not follow the STRICT formatting. "
                      "Only output executable Python code inside a ```python block."
                )
                continue

            code = extract_code(result)
            # --- Execute the code on the provided df ---
            local_vars = {"df": state.clean_augmented_data}
            try:
                exec(code, {}, local_vars)
                modified_df = local_vars["df"]

                if isinstance(modified_df, pd.DataFrame):
                    # If the code ran, but some required features are missing → RETRY with feedback
                    missing_feats = [f for f in state.feature_dict.keys() if f not in modified_df.columns]
                    if missing_feats:
                        state.error_message = (
                            "❌ Invalid instruction detected.\n"
                            f"Missing required features: {missing_feats}\n\n"
                            f"Full original instruction:\n{state.construct_strategy}"
                        )
                        print(state.error_message)

                        user_msg = (
                            base_user_msg
                            + f"\n\nNote: Your last code failed because these required features are missing: {missing_feats}\n"
                              "Please regenerate corrected Python code."
                        )
                        continue  # retry generation

                    # ✅ Success: overwrite state df and finish
                    state.clean_augmented_data = modified_df
                    print(f"✅ Successfully generated all required features at attempt {attempt+1}")
                    return 

            except Exception as e:
                # Other runtime errors → retry with feedback
                error_feedback = str(e)
                print(f"❌ Execution failed (attempt {attempt+1}): {error_feedback}")
                user_msg = (
                    base_user_msg
                    + f"\n\nNote: Your last code failed with the following error:\n{error_feedback}\n"
                      "Please regenerate corrected Python code."
                )
                continue

        # Out of retries (we only get here when we kept missing features or kept failing on non-KeyError)
        raise RuntimeError(f"Failed after {max_retries} retries. Last output:\n{last_result}")

    return agent_node
